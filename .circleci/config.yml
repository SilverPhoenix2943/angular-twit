version: 2
jobs:
  build:
    working_directory: ~/app
    docker:
      - image: boardman/angular-twit-circleci-base:0.0.1
        environment:
          CHROME_BIN: "/usr/bin/google-chrome"
    steps:
      - checkout
      - setup_remote_docker
      - restore_cache:
          key: dependency-cache-{{ checksum "yarn.lock" }}
      - run:
          name: install-dependencies
          command: yarn install
      - save_cache:
          key: dependency-cache-{{ checksum "yarn.lock" }}
          paths:
            - ~/.cache/yarn
            - ./node_modules
      - run:
          name: angular-build
          command: yarn build --aot --progress false
      - run:
          name: angular-test
          command: yarn test --single-run  --progress false
      - run:
          name: angular-lint
          command: yarn lint
          prefix: lint
      - restore_cache:
          keys:
            - v1-{{ .Branch }}
          paths:
            - ~/caches/app.tar
      - run:
          name: Load Docker image layer cache
          command: |
            set +o pipefail
            docker load -i /caches/app.tar | true
      - run:
          name: Build application Docker image
          command: |
            docker build --cache-from=app -t app .
      - run:
          name: Save Docker image layer cache
          command: |
            mkdir -p ~/caches
            docker save -o ~/caches/app.tar app
      - save_cache:
          key: v1-{{ .Branch }}-{{ epoch }}
          paths:
            - ~/caches/app.tar
      - deploy:
          name: Push application Docker image
          command: |
            if [ "${CIRCLE_BRANCH}" == "master" ]
            then
              login="$(aws ecr get-login)"
              ${login/"-e none"/""}
              docker tag app "${ECR_ENDPOINT}/app:${CIRCLE_SHA1}"
              docker push "${ECR_ENDPOINT}/app:${CIRCLE_SHA1}"
            fi
  deploy:
    docker:
      - image: my-image
    working_directory: ~/app
    steps:
      - run:
          name: Deploy Master to GKE
          command: ./deploy.sh


workflows:
  version: 2
  build_and_deploy:
    jobs:
      - build
      - deploy:
          requires:
            - build
          filters:
            branches:
              only: master
